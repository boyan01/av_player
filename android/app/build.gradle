def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "tech.soit.flutter.media_player"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_UNIFIED_HEADERS=ON", "-DANDROID_STL=c++_shared"
            }
        }
    }

    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.12.0+"
        }
    }
    buildFeatures {
        prefab true
    }

}

flutter {
    source '../..'
}

configurations {
    nativeDeps
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.oboe:oboe:1.5.0'
    nativeDeps 'com.arthenica:mobile-ffmpeg-full:4.3.1.LTS'
}


// COPY prebuilt ffmpeg libs to cpp/lib/
afterEvaluate {
    def libPath = projectDir.absolutePath + "/src/main/cpp/lib"
    def tempPath = buildDir.absolutePath + "/nativeDeps/ffmpeg"
    copy {
        from(zipTree(configurations.nativeDeps.files.first()))
        into(tempPath)
    }
    copy {
        from(tempPath + "/jni/")
        into(libPath)
    }
}
